<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | The Red Gem of Programming]]></title>
  <link href="http://aavalam.github.com/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://aavalam.github.com/"/>
  <updated>2013-05-03T16:43:13-05:00</updated>
  <id>http://aavalam.github.com/</id>
  <author>
    <name><![CDATA[Victor and Ashbbb]]></name>
    <email><![CDATA[keeperotphones@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing multiple versions of Ruby]]></title>
    <link href="http://aavalam.github.com/blog/2013/02/26/testing-multiple-versions-of-ruby/"/>
    <updated>2013-02-26T17:24:00-06:00</updated>
    <id>http://aavalam.github.com/blog/2013/02/26/testing-multiple-versions-of-ruby</id>
    <content type="html"><![CDATA[<p>When you have code that you would like to test, it is fairly simple to
develop your tests to allow for it to be ran in more than one version of
Ruby. <!-- more --></p>

<p>This is part of the code that I use through inspiration from the <a href="https://github.com/rubyspec/rubyspec/blob/master/core/fixnum/bit_xor_spec.rb#L63">Ruby Spec</a> project.  I haven't checked the code, so I don't believe it is identical in functionality.</p>

<p>The helper.rb file is loaded with my helper file in my testing folder.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby_version_is - helper.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">ruby_version_is</span><span class="p">(</span><span class="n">version_string</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">version_string</span> <span class="o">==</span> <span class="no">RUBY_VERSION</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;block_given? ? yield : true </span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This allows me to do the identical thing you saw on line 63 of that link
above.  In other words, I can use it with a block and it just does the
right thing.</p>

<p>Or I can use it like a query, and it will either return true or nil.</p>

<p>This makes it simple for me to have tests that are version specific, yet
won't fill my tests with failures just because of a version difference.</p>

<p>It also lets me search for those things that are specific to a version.</p>

<p>Ruby 2.0.0-p0 is out, and I used it to document the new to_h
functionality</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Test using ruby_is_version - core_struct_to_h_spec.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Car = Struct.new(:make, :model, :year) do</span>
</span><span class='line'><span class="sr">  def build</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">ruby_version_is</span> <span class="s1">&#39;2.0.0&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;Ruby 2.0.0 stuff&#39;</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;before :each do</span>
</span><span class='line'><span class="sr">  @car = Car.new(&#39;Toyota&#39;, &#39;Prius&#39;, 2014)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">it &#39;converts class to hash&#39; do</span>
</span><span class='line'><span class="sr">  @car.to_h.must_equal make: &#39;Toyota&#39;, model: &#39;Prius&#39;, year: 2014</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now I can run this test alongside others, and I don't have to worry
about what version of Ruby it is testing against.</p>

<p>I think that I will add some functionality though.  So I can specify a
minimum version of Ruby, and when 3.0.0 comes out, I will know what
things change based on the tests, because they will run against that
version as well, while not running against previous ones.</p>

<p>Anyway, how do you test against different versions of Ruby?</p>

<p>Continue this conversation on our <a href="https://plus.google.com/u/0/116568773932133159290/posts/Ffzy66e8TrH">Google Plus post</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Reference to Minitest and Minitest Spec]]></title>
    <link href="http://aavalam.github.com/blog/2012/03/22/quick-reference-to-minitest-and-minitest-spec/"/>
    <updated>2012-03-22T17:42:00-05:00</updated>
    <id>http://aavalam.github.com/blog/2012/03/22/quick-reference-to-minitest-and-minitest-spec</id>
    <content type="html"><![CDATA[<p>I placed this in my ~/bin folder so that I could run it whenever I need a quick refresher on the available assertions. It will automatically include changes as minitest gets updated over time and versions.  <!-- more --></p>

<p><div><script src='https://gist.github.com/2165841.js?file=minitest_assertions.rb'></script>
<noscript><pre><code>#!/usr/bin/env ruby
require 'test/unit'
require 'minitest/spec'


# Reasonable default of 3 columns
@columns = 3

puts &quot;== Spec Style&quot;


def columnize(method)
  @column_count ||= 1
  print &quot;#{method}&quot;.ljust(25)
  if @column_count == @columns
    puts
    @column_count = 0
  end
  @column_count += 1 
end

MiniTest::Spec.methods.sort.each do |method|
  if method.to_s =~ /wont/ or method.to_s =~ /must/
    columnize(method)
  end
end

puts &quot;\n\n== Test Style&quot;
column_count = 1

MiniTest::Assertions.instance_methods.sort.each do |method|
  if method =~ /assert/ or method.to_s =~ /refute/
    columnize(method)
  end
end
</code></pre></noscript></div>
</p>

<p>Currently the list shows:</p>

<p><div><script src='https://gist.github.com/2165841.js?file=output.txt'></script>
<noscript><pre><code>== Spec Style
must_be                  must_be_close_to         must_be_empty            
must_be_instance_of      must_be_kind_of          must_be_nil              
must_be_same_as          must_be_silent           must_be_within_delta     
must_be_within_epsilon   must_equal               must_include             
must_match               must_output              must_raise               
must_respond_to          must_send                must_throw               
wont_be                  wont_be_close_to         wont_be_empty            
wont_be_instance_of      wont_be_kind_of          wont_be_nil              
wont_be_same_as          wont_be_within_delta     wont_be_within_epsilon   
wont_equal               wont_include             wont_match               
wont_respond_to          

== Test Style
_assertions              _assertions=             
assert                   assert_block             assert_empty             
assert_equal             assert_in_delta          assert_in_epsilon        
assert_includes          assert_instance_of       assert_kind_of           
assert_match             assert_nil               assert_operator          
assert_output            assert_raises            assert_respond_to        
assert_same              assert_send              assert_silent            
assert_throws            refute                   refute_empty             
refute_equal             refute_in_delta          refute_in_epsilon        
refute_includes          refute_instance_of       refute_kind_of           
refute_match             refute_nil               refute_operator          
refute_respond_to        refute_same

</code></pre></noscript></div>
</p>

<p>I placed this in my ~/bin folder so that I could run it whenever I need a quick refresher on the available assertions. It will automatically include changes as minitest gets updated over time and versions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fuzzy Equality in RubyDocTest]]></title>
    <link href="http://aavalam.github.com/blog/2008/09/11/fuzzy-equality-in-rubydoctest/"/>
    <updated>2008-09-11T01:00:00-05:00</updated>
    <id>http://aavalam.github.com/blog/2008/09/11/fuzzy-equality-in-rubydoctest</id>
    <content type="html"><![CDATA[<p>I was working on some tests for a standard exercise with temperature conversion. I then realized that there was no provision for testing if something is equal to a certain precision. As happens with different math problems concerning Float, different actions and different processors can give different answers. It doesn't matter to me in this instance, as long as it is within a 'tolerance'.<!-- more --></p>

<p>So, I hopped into my favorite editor, to quickly write some code to generate some ranges of acceptable answers for my method.</p>

<p>I wanted my method to respond with numbers that aren't formatted to any precision, just native floating point numbers, but as this is an exercise that students are going to write, it is common for some of them to return answers that are 'correct' to the 10ths place, or 100ths place.</p>

<p>I want to be able to check the work semi-automatically, and so I used this for my doctest:</p>

<p>``` ruby IRB Session</p>

<blockquote><blockquote><p>((37.74)..(37.8155555555556)) === convert(100.0)
=> true
((-17.205)..(-17.2394444444444)) === convert(1.0)
=> true
```</p></blockquote></blockquote>

<p>And it works well... I can now use any student supplied method, and find out if their math is 'close'. But, now I can do it from different locations, so if I am working on an older system with a floating point error, my tests should pass, even if the results aren't exactly on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using RubyDocTest for development]]></title>
    <link href="http://aavalam.github.com/blog/2008/09/07/using-rubydoctest-for-development/"/>
    <updated>2008-09-07T02:10:00-05:00</updated>
    <id>http://aavalam.github.com/blog/2008/09/07/using-rubydoctest-for-development</id>
    <content type="html"><![CDATA[<p>First of all, you must have installed rubydoctest which can be installed as a gem, or from source.  Source can be found here: <a href="http://rubyforge.org/projects/rubydoctest/">rubydoctest</a> and the handy <code>gem install rubydoctest</code> can be used as well.</p>

<p>I just want to introduce you to the tool.  I find it handy when I want to verify things in irb, which I have open anyway, and it helps to document my code inline, or to have a .doctest file sitting next to my file (or in the ../tests directory) <!-- more --></p>

<p>Of course, we are going to use a very contrived example.  I doubt anyone would code this way for such a simple solution (and a little bit not accurate in the calculations).  But it does show a few things about doctest.</p>

<p>We have covered shortly how to acquire rubydoctest.  Now let's talk about using it.  There are two ways to use it.  Internal to your code, and external as a .doctest document.  We will be using it in line with our code.</p>

<p>Our code problem will be this:  How many minutes are in a year.</p>

<p>What we are going to do, just for this exercise, is setup a hash, like this:</p>

<p>``` ruby minutes_in_year.rb</p>

<h1>!/usr/bin/ruby</h1>

<h1>Write a program that will give you minutes in a year.</h1>

<p>leap = false
TimeUnits = {:seconds => 60, :minutes => 60, :hours => 24, :days => (leap ? 30.5 : 30.4167), :months => 12}
```
(I warned you this was contrived!)  Obviously the first couple of things we want to confirm is that leapyear indeed affects the assignment of your constant TimeUnits value of :days.</p>

<p>We can do this in IRB: (and it may be that we were playing in IRB first, testing other ideas, before we came up with this, which will be the start of our program!)</p>

<p>``` ruby IRB Session</p>

<blockquote><blockquote><p>leap = false
=> false
TimeUnits = {:seconds => 60, :minutes => 60,   :hours => 24,
?> :days => (leap ? 30.5 : 30.4167), :months => 12}
=> {:minutes=>60, :hours=>24, :days=>30.4167, :months=>12, :seconds=>60}</p>

<p>```</p></blockquote></blockquote>

<p>And as you can see, we now have the makings of our first doctest.  But it also brings up the question of "How?"</p>

<p>So, a little explanation; DocTests are comments inside your code that you create to give a test name, and the results of any tests, as they are expected to be.  So, here is the format to create what we have above... (I use multi-line comments in block format (=begin, =end), you can use the hash comment style if you like).  So below my code, I place the following lines:</p>

<p>``` ruby minutes_in_year.rb</p>

<blockquote><blockquote><p>leap = false
TimeUnits.merge!( {:days => (leap ? 30.5 : 30.4167)})
=> {:minutes=>60, :hours=>24, :days=>30.4167, :months=>12, :seconds=>60}
```</p></blockquote></blockquote>

<p>You can see that this is the exact same output from IRB if you use the <code>irb --simple-prompt</code> command at your console.  As easy as copy/paste to get your tests and assertions, and I consider this a BIG plus!</p>

<p>However... we are not ready to test yet.  Remember I stated that doctests are comments.  This is not a comment... so we have some setup work to do... simply we will start our comment block, above the lines shown, and name our test.  It looks like this:</p>

<p>``` ruby minutes_in_year.rb
=begin
doctest: Setup Time Units values in hash (not leap year)</p>

<blockquote><blockquote><p>leap = false
TimeUnits.merge!( {:days => (leap ? 30.5 : 30.4167)})
=> {:minutes=>60, :hours=>24, :days=>30.4167, :months=>12, :seconds=>60}
=end
```</p></blockquote></blockquote>

<p>Now we have a doctest with a test name of "Setup Time Units values in hash (not leap year).  The second line of test is  >> leap = false.  You can note that there is no 'results' line underneath.  This is because we don't actually want to test for a result... we just want to setup the state in IRB.  We are assuming that the assignment here will be successful.</p>

<p>Now it is time to test it.  How to do this?  We save the file, and (I will use <code>minutes_in_year.rb</code>) run <code>rubydoctest minutes_in_year.rb</code> like so:</p>

<p><code>text Command Line
c:&gt;rubydoctest minutes_in_year.rb
=== Testing 'minutes_in_year.rb'...
OK  | Setup Time Units values in hash (not leap year)
1 comparisons, 1 doctests, 0 failures, 0 errors
</code></p>

<p>If you are in windows,  you may not see the color, but the OK here is green.  (In the final view of the file, you will see how I get color...  but that is mentioned in another blog post here.)  In any case... we now have the beginning of our program, complete with a test.  If we were to refactor later, obviously, we would likely need to change our test (It won't fail, due to being self contained...) but it will remind is via documentation what we were doing when we come back and look at it.</p>

<p>On to the next portion of our program.</p>

<p>We want to make sure that our hash is working with the ternary operator, so we type and see the following in IRB:</p>

<p>``` ruby IRB Session</p>

<blockquote><blockquote><p>TimeUnits[:days]
=> 30.4167
```</p></blockquote></blockquote>

<p>And we see it is good, so we can add it to our doctest area.</p>

<p>Hint:  You may be asking "Why am I testing such a simple thing?"  Extra credit for you if you do this exercise and use merge method, rather than merge! method... If you did not use this test, you would not catch that bug.</p>

<p>But we also want to check if it is working for leap = true.  We must setup the constant TimeUnits again...</p>

<p>``` ruby IRB Session
=begin
doctest: Test our leap year true case for TimeUnits</p>

<blockquote><blockquote><p>leap = true
=> true
TimeUnits.merge!( {:days => (leap ? 30.5 : 30.4167) } )
=> {:months=>12, :days=>30.5, :minutes=>60, :hours=>24, :seconds=>60}
TimeUnits[:days]
=end
```</p></blockquote></blockquote>

<p>Which we have confirmed, so we can place the lines into our doctest comments.</p>

<p>We haven't changed our code at all, yet, right now, just documenting what we want it to do based on different conditions.</p>

<p>So, let's think in IRB about how we are going to calculate minutes in a year.</p>

<p>I end up doing this:</p>

<p>``` ruby IRB Session</p>

<blockquote><blockquote><p>leap = false => false
TimeUnits.merge!( {:days => (leap ? 30.5 : 30.4167)})
=> {:months=>12, :days=>30.4167, :minutes=>60, :hours=>24, :seconds=>60}
x = 1
=> 1
TimeUnits.each_pair {|key, value| x = x * value unless key ==
:seconds}
=> {:months=>12, :days=>30.4167, :minutes=>60, :hours=>24, :seconds=>60}
x => 525600.576
```</p></blockquote></blockquote>

<p>And everything looks 'ok' to me.  I am sure the result is not totally accurate... but good enough for me...</p>

<p>It goes into my doctest as well, and then the code goes into my program...   I will call the test as follows:</p>

<p>``` ruby minutes_in_year.rb
doctest: Setup for minutes in non-leapyaer</p>

<blockquote><blockquote><p>leap = false
=> false
TimeUnits.merge!( {:days => (leap ? 30.5 : 30.4167)})
=> {:months=>12, :days=>30.4167, :minutes=>60, :hours=>24, :seconds=>60}
doctest: compute minutes in a non-leapyear
x = 1
=> 1
TimeUnits.each_pair {|key, value| x = x * value unless key ==
:seconds}
=> {:months=>12, :days=>30.4167, :minutes=>60, :hours=>24, :seconds=>60}
x
=> 525600.576
```</p></blockquote></blockquote>

<p>And hopefully if I have done everything right, with my notes, and such, you should end up with a rubydoctest that ends up something like this:</p>

<p><code>text Console
=== Testing 'minutes_in_year.rb'...
OK  | Setup Time Units values in hash (not leap year)
OK  | Test our leap year true case for TimeUnits
OK  | Setup for minutes in non-leapyaer
OK  | compute minutes in a non-leapyear
9 comparisons, 4 doctests, 0 failures, 0 errors
</code></p>

<p>Perhaps this is almost the code you ended up with...</p>

<p>``` ruby minutes_in_year.rb</p>

<h1>!/usr/bin/ruby</h1>

<h1>Write a program that will give you minutes in a year.</h1>

<p>leap = false
TimeUnits = {:seconds => 60, :minutes => 60,   :hours => 24,
  :days => (leap ? 30.5 : 30.4167), :months => 12}</p>

<p>=begin
doctest: Setup Time Units values in hash (not leap year)</p>

<blockquote><blockquote><p>leap = false
TimeUnits.merge!( {:days => (leap ? 30.5 : 30.4167)})
=> {:minutes=>60, :hours=>24, :days=>30.4167, :months=>12, :seconds=>60}
=end</p></blockquote></blockquote>

<p>=begin
doctest: Test our leap year true case for TimeUnits</p>

<blockquote><blockquote><p>leap = true
=> true
TimeUnits.merge!( {:days => (leap ? 30.5 : 30.4167) } )
=> {:months=>12, :days=>30.5, :minutes=>60, :hours=>24, :seconds=>60}
TimeUnits[:days]
=end</p></blockquote></blockquote>

<h1>some additional notes:  doctests can contain comments like this inside,</h1>

<h1>for further documenting thoughts.</h1>

<h1>I chose not to do this.</h1>

<h1>Also, as you can see below, doctests don't have to be seperated as above,</h1>

<h1>they could be as below.</h1>

<p>=begin
doctest: Setup for minutes in non-leapyaer</p>

<blockquote><blockquote><p>leap = false
=> false
TimeUnits.merge!( {:days => (leap ? 30.5 : 30.4167)})
=> {:months=>12, :days=>30.4167, :minutes=>60, :hours=>24, :seconds=>60}
doctest: compute minutes in a non-leapyear
x = 1
=> 1
TimeUnits.each_pair {|key, value| x = x * value unless key ==
:seconds}
=> {:months=>12, :days=>30.4167, :minutes=>60, :hours=>24, :seconds=>60}
x
=> 525600.576
=end</p></blockquote></blockquote>

<p>leap = false
TimeUnits.merge!( {:days => (leap ? 30.5 : 30.4167)})
x = 1
TimeUnits.each_pair {|key, value| x = x * value unless key == :seconds}
puts x</p>

<h1>Another time, perhaps, we can explore this in a more robust area, or</h1>

<h1>cover some other things.</h1>

<p>```</p>
]]></content>
  </entry>
  
</feed>
